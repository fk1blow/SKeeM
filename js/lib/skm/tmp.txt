// SKM WebSocket implementation

define(['skm/skm',
  'skm/k/Object',
  'skm/util/Logger',
  'skm/util/Detection',
  'skm/util/Observable',
  'skm/util/Timer'], function()
{


SKM.net = SKM.net || {};


var Logger = SKM.util.Logger.create();


var WebSocketDefaults = {
  DEFAULT_PORT: 80,
  SECURE_PORT: 443,
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
};


var getProperConstructor = function() {
  var c = null;
  if ('WebSocket' in window)
    c = WebSocket;
  else if ('MozWebSocket' in window)
    c = MozWebSocket;
  else
    c = null;
  return c;
};


/**
 * Error messages object
 */
SKM.net.WebSocketErrorMessages = {
  UNAVAILABLE: 'WebSockets implementation is unavailable.',
  NATIVE_IMPLEMENTATION_MISSING: 'Native implementation not found.',
  MISSSING_URL: 'The url param of the WebSocket constructor is mandatory.',
  SOCKET_ALREADY_OPENED: 'Seems that another socket is already opened.'
};


/**
 * SKM WebSocket wrapper
 */
SKM.net.WebSocket = SKM.Object.extend(SKM.util.Observable, {
	url: null,

	subprotocols: null,
  
	/**
	 * Private
	 */

	_socket: null,

  _nativeConstructor: null,

  _connectionTimer: null,

  _reconnectionTimer: null,

  _isReconnecting: false,

  _forceClosed: false,

	initialize: function() {
    this._socket = null;
    this._nativeConstructor = null;
    this._prepareNativeConstructor();
    
    this._connectionTimer = SKM.util.Timer.create({ times: 1 })
      .bind('stop', this.handleAutoDisconnect, this);
    
    // this._reconnectionTimer = SKM.util.Timer.create({
    //   times: 1, 
    //   interval: 3000
    // }).bind('tick', this.handleReconnectionTry, this)
    //   .bind('stop', this.handleReconnectionStop, this)
    //   .bind('lasttick', function() {
    //     cl('lasttick')
    //     this._isReconnecting = false;
    //   }, this);
	},

  /**
   * Commands
   */
  
  connect: function() {
    this._closePrevious();
    this._connectionTimer.start();
    this._createSocketInstace();
  },

  /*reconnect: function() {
    cl('WebSocket.reconnect');

    if ( this._isReconnecting ) {
      cl('...is reconnecting')
      return;
    }

    this._isReconnecting = true;
    this._closeSocketConnection();
    this._createSocketInstace();
    // this._connectionTimer.start();
    this._reconnectionTimer.start();
  },*/  

  disconnect: function() {
    cl('disconnect')
    this._connectionTimer.stop();
    // this._reconnectionTimer.stop();
    this._closeSocketConnection();
    cl('__________________________________________________')
  },

	/**
	 * Handlers
	 */
  
  handleAutoDisconnect: function() {
    cl('handleAutoDisconnect', this._socket.readyState)
    this._forceClosed = true;
    this.disconnect();
  },
  
  handleReconnectionTry: function() {
    cl('handleReconnection')
    this._isReconnecting = true;
    // this._connectionTimer.intrerupt();
    this._closeSocketConnection();
    this._createSocketInstace();
  },

  handleReconnectionStop: function() {
    cl('%chandleReconnectionStop', 'color:red')
    // this._connectionTimer.stop();
    this._closeSocketConnection();
    // this._isReconnecting = false;
  },
	
	handleOnOpen: function() {
    // this._connectionTimer.intrerupt();
    this._reconnectionTimer.intrerupt();
  },

  handleOnClose: function(event) {
    cl('handleOnClose :: ', event)

    

    // if ( this._previousClosed ) {
    //   cl('reset _previousClosed')
    //   this._previousClosed = false;
    // }

    if ( this._autoClosed ) {
      cl('should reconnect')
      cl('reset _autoClosed')
      cl('#socket readyState : ', this._socket.readyState)
      this._autoClosed = false;
    } else {
      cl('regular close or something else')
      cl('WebSocket.handleOnClose', event)
    }
  },

  handleOnError: function(event) {
    // cl('handleOnError', event)
  },

  /**
   * Queries
   */
  
  isConnecting: function() {
    if ( this._socket )
      return this.getState('CONNECTING') == WebSocketDefaults.CONNECTING;
    return false;
  },

  isOpened: function() {
    if ( this._socket )
      return this.getState('OPEN') == WebSocketDefaults.OPEN;
    return false;
  },

  isDisconnecting: function() {
    if ( this._socket )
      return this.getState('CLOSING') == WebSocketDefaults.CLOSING;
    return false;
  },

  isClosed: function() {
    if ( this._socket )
      return this.getState('CLOSED') == WebSocketDefaults.CLOSED;
    return false;
  },

  getState: function(state) {
    var tmpState = this._socket.readyState;
    if ( state )
      tmpState = tmpState[state];
    return tmpState;
  },
	
  /**
   * PRIVATE
   */
  
  _closeSocketConnection: function() {
    if ( !this._socket )
      return;
    cl('_closeSocketConnection', this._socket.readyState);
    this._socket.close();
  },

  _closePrevious: function() {
    if ( !this._socket )
      return;
    cl('_closePrevious');
    this._forceClosed = true;
    this._closeSocketConnection();
  },

  _prepareNativeConstructor: function() {
    if ( this._nativeConstructor )
      return;
    var ctor = getProperConstructor();
    if ( ctor === null )
      throw new Error(SKM.net.WebSocketErrorMessages.NATIVE_IMPLEMENTATION_MISSING);
    this._nativeConstructor = ctor;
  },

  _getNativeConstructor: function() {
    if ( !this._nativeConstructor )
      this._prepareNativeConstructor();
    return this._nativeConstructor;
  },

  _createSocketInstace: function() {
    cl('_createSocketInstace')
    var c = this._getNativeConstructor();
    if ( this.subprotocols )
      this._socket = new c(this.url, this.subprotocols);
    else
      this._socket = new c(this.url);
    this._attachSocketEvents();
  },

  _attachSocketEvents: function() {
    var self = this;
    this._socket.onopen = function() {
      self.handleOnOpen.apply(self, arguments);
    }
    this._socket.onerror = function() {
      self.handleOnError.apply(self, arguments);
    }
    this._socket.onclose = function() {
      self.handleOnClose.apply(self, arguments);
    }
    this._socket.onmessage = function() {
      // self.handleOnMessage.apply(self, arguments);
    }
  }
});


});

















// Simple Timer object

// CHANGE TO imeout object insttead of interval

define(['skm/skm',
  'skm/util/Logger',
  'skm/util/Observable',
  'skm/k/Object'], function(skm, SKMLogger, SKMObservable, SKMObject)
{


var Logger = SKMLogger.create();


/**
 * Timer constructor
 * 
 * @description wrapper for creating dynamic and manageable times
 * @todo switch the maine logic from "setInterval" to "setTimeout"
 */
Timer = SKMObject.extend(SKMObservable, {
  // How manny times the interval will
  // trigger a tick; (x < 1) == infinity
  ticks: 1,

  // The interval at which a tick is being triggered
  tickInterval: 0,

  // Timer object reference
  _timerObject: null,

  // How many time the timer has fired a "tick" event
  _tickCounter: 0,

  _timersStates: { STOPPED: 0, STARTED: 1, PAUSED: 2 },

  _currentState: 0,

  initialize: function(options) {
    var opt = options || {};
    this.ticks = (typeof val === 'number') ? opt.ticks : 1;
    this.tickInterval = opt.tickInterval || 1000;
    this._timerObject = null;
    this._tickCounter = 0;
  },

  /**
   * Commands
   */

  start: function() {
    if ( this.isStarted() ) {
      Logger.error('Timer.start : Timer already started.');
      return false;
    }
    this._startTimer();
    return this;
  },

  stop: function(silent) {
    // If not started and not paused
    if ( !this.isStarted() || ( this.getState() === 2 ) ) {
      // Logger.error('Timer.stop : Unable to stop a stopped/null timer.');
      return false;
    }
    this._stopTimer(silent || false);
    return this;
  },

  pause: function() {
    if ( !this.isStarted() ) {
      Logger.error('Timer.pause : Unable to pause a stopped/null timer.');
      return false;
    }
    this._pauseTimer();
  },

  resume: function() {
    if ( this.getState() != 2 ) {
      Logger.error('Timer.resume : Unable to resume timer' + 
        ' - timer must be paused.');
      return false;
    }
    this._resumeTimer();
  },

  /**
   * Queries
   */

  getState: function() {
    return this._currentState;
  },

  isStarted: function() {
    return this.getState() === 1;
  },

  isPaused: function() {
    return this.getState() === 2;
  },

  getTimerObject: function() {
    return this._timerObject;
  },

  setTimerObject: function(timer) {
    if ( this._timerObject !== null )
      this._timerObject = null;
    this._timerObject = timer;
  },

  /**
   * Handlers
   */

  handleTimerTick: function() {
    this.fire('tick', { state: this.getState(), tickCounter: this._tickCounter });
  },

  handleTimerStop: function() {
    this.fire('stop', { state: this.getState() });
  },

  handleTimerPause: function() {
    this.fire('pause', { state: this.getState(), tickCounter: this._tickCounter });
  },

  handleTimerResume: function() {
    this.fire('resume', { state: this.getState(), tickCounter: this._tickCounter });
  },

  /**
   * Private
   */

  _startTimer: function() {
    var that = this;
    // Current state is STARTED
    this._setCurrentState(1);
    // If maximum nr of ticks or is not runnig to infinite, stop timer
    if ( this._tickCounter >= this.ticks && this.ticks > 0 ) {
      this._stopTimer();
      return false;
    }
    // The actual timer object assignment
    var timer = setTimeout(function() {
      that._destroyTimer();
      that._tickCounter++;
      that.handleTimerTick();
      // restart only if state === 0 => is started
      if ( that.isStarted() )
        that._startTimer();
    }, this.tickInterval);
    this.setTimerObject(timer);
  },

  _stopTimer: function(silent) {
    this._tickCounter = 0;
    this._setCurrentState(0);
    if ( !silent ) {
      this.handleTimerStop();
      this._destroyTimer();
    } else {
      this._destroyTimer();
    }
  },

  _pauseTimer: function() {
    this._destroyTimer();
    this._setCurrentState(2);
    this.handleTimerPause();
  },

  _resumeTimer: function() {
    this._startTimer();
    this._setCurrentState(1);
    this.handleTimerResume();
  },
 
  _destroyTimer: function() {
    if ( this._timerObject ) {
      clearTimeout(this._timerObject);
      this._timerObject = null;
    }
  },

  _setCurrentState: function(state) {
    this._currentState = state;
  }
});


return Timer;


});